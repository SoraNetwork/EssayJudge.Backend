// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoraEssayJudge.Data;

#nullable disable

namespace SoraEssayJudge.Migrations
{
    [DbContext(typeof(EssayContext))]
    [Migration("20250712112813_AddApikeyModels")]
    partial class AddApikeyModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("SoraEssayJudge.Models.AIModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApiKeyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApiKeyId");

                    b.ToTable("AIModels");
                });

            modelBuilder.Entity("SoraEssayJudge.Models.AIModelUsageSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AIModelId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UsageType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AIModelId");

                    b.ToTable("AIModelUsageSettings");
                });

            modelBuilder.Entity("SoraEssayJudge.Models.AIResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EssaySubmissionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Feedback")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Score")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EssaySubmissionId");

                    b.ToTable("AIResults");
                });

            modelBuilder.Entity("SoraEssayJudge.Models.ApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Endpoint")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Secret")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("SoraEssayJudge.Models.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("SoraEssayJudge.Models.EssayAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("BaseScore")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ScoringCriteria")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleContext")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalScore")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("EssayAssignments");
                });

            modelBuilder.Entity("SoraEssayJudge.Models.EssaySubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ColumnCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EssayAssignmentId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("FinalScore")
                        .HasColumnType("REAL");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsError")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JudgeResult")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParsedText")
                        .HasColumnType("TEXT");

                    b.Property<float>("Score")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EssayAssignmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("EssaySubmissions");
                });

            modelBuilder.Entity("SoraEssayJudge.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SoraEssayJudge.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SoraEssayJudge.Models.AIModel", b =>
                {
                    b.HasOne("SoraEssayJudge.Models.ApiKey", "ApiKey")
                        .WithMany("AIModels")
                        .HasForeignKey("ApiKeyId");

                    b.Navigation("ApiKey");
                });

            modelBuilder.Entity("SoraEssayJudge.Models.AIModelUsageSetting", b =>
                {
                    b.HasOne("SoraEssayJudge.Models.AIModel", "AIModel")
                        .WithMany("UsageSettings")
                        .HasForeignKey("AIModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AIModel");
                });

            modelBuilder.Entity("SoraEssayJudge.Models.AIResult", b =>
                {
                    b.HasOne("SoraEssayJudge.Models.EssaySubmission", "EssaySubmission")
                        .WithMany("AIResults")
                        .HasForeignKey("EssaySubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EssaySubmission");
                });

            modelBuilder.Entity("SoraEssayJudge.Models.EssaySubmission", b =>
                {
                    b.HasOne("SoraEssayJudge.Models.EssayAssignment", "EssayAssignment")
                        .WithMany("Submissions")
                        .HasForeignKey("EssayAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoraEssayJudge.Models.Student", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId");

                    b.Navigation("EssayAssignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SoraEssayJudge.Models.Student", b =>
                {
                    b.HasOne("SoraEssayJudge.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("SoraEssayJudge.Models.AIModel", b =>
                {
                    b.Navigation("UsageSettings");
                });

            modelBuilder.Entity("SoraEssayJudge.Models.ApiKey", b =>
                {
                    b.Navigation("AIModels");
                });

            modelBuilder.Entity("SoraEssayJudge.Models.Class", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SoraEssayJudge.Models.EssayAssignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("SoraEssayJudge.Models.EssaySubmission", b =>
                {
                    b.Navigation("AIResults");
                });

            modelBuilder.Entity("SoraEssayJudge.Models.Student", b =>
                {
                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
